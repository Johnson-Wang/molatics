#!/usr/bin/env python

# Copyright (C) 2015 Wang Xinjiang
# All rights reserved.


import os
from optparse import OptionParser

from phonopy import *
from phonopy.interface import vasp

from mdfc import MolecularDynamicsForceConstant as MDFC
from mdfc.settings import ConfParser
from realmd.mdkappa import MolecularDynamicsForceEnergy as MDFE
from mdfc.force_constants import ForceConstants
mdfc_version = "1.3"

# AA is created at http://www.network-science.de/ascii/.
def print_mdfc():
    print """        _
 __  __ ____  _____ ____
|  \/  |  _ \|  ___/ ___|
| |\/| | | | | |_ | |
| |  | | |_| |  _|| |___
|_|  |_|____/|_|   \____|
"""

def print_version(version):
    print " " * 24, version
    print ""

def print_end():
    print """                 _
   ___ _ __   __| |
  / _ \ '_ \ / _` |
 |  __/ | | | (_| |
  \___|_| |_|\__,_|
"""

def print_error():
    print """  ___ _ __ _ __ ___  _ __
 / _ \ '__| '__/ _ \| '__|
|  __/ |  | | | (_) | |
 \___|_|  |_|  \___/|_|
"""

def print_attention(attention_text):
    print "*******************************************************************"
    print attention_text
    print "*******************************************************************"
    print ""

def print_error_message(message):
    print
    print message
    print_error()

def file_exists(filename, log_level):
    if os.path.exists(filename):
        return True
    else:
        error_text = "%s not found." % filename
        print_error_message(error_text)
        if log_level > 0:
            print_error()
        sys.exit(1)

#################
# Parse options #
#################

parser = OptionParser()
parser.set_defaults(
    interface = None,
    cutoff_pair=None,
    cutoff_triplet=None,
    cutoff_disp="", # A. cutoff displacement distance, data above this cutoff is ignored in predicting new positions
    predict_count=1,
    is_fold_check = False,
    is_fc3=False,
    factor=None,
    is_fc2=False,
    is_graph_plot=False,
    is_graph_save=False,
    is_hdf5=False,
    is_legend=False,
    is_nosym=False,
    is_wien2k_p1=False,
    is_rotational=False,
    is_translational=False,
    loglevel=None,
    primitive_axis=None,
    quiet=False,
    supercell_dimension=None,
    symprec=1e-5,
    cutrf=1e-3,
    temperature=None,
    cell_poscar=None,
    force_filename = None,
    coord_filename=None,
    file_format='h',
    step_range="",
    is_convert_input=False,
    divide=1,
    verbose=False)

parser.add_option("-c", "--cell", dest="cell_poscar",
                  action="store", type="string",
                  help="Read unit cell", metavar="FILE")
parser.add_option("--count", dest="predict_count",type="int",
                  help="The number of times for searching the equilibrium structure")
parser.add_option("--interface", dest="interface",
                  action="store", type="string",
                  help="The interface of input and output files")
parser.add_option("--cp", "--cutoff_pair", dest="cutoff_pair", type="string",
                  help="Set the cutoff distance between a pair of atoms for fc2 (of the same of different species)")
parser.add_option("--ct", "--cutoff_triplet", dest="cutoff_triplet", type="string",
                  help="Set the cutoff distance amongst a triplet of atoms for fc3 (of the same of different species)")
parser.add_option("--cd", "--cutoff_disp", dest="cutoff_disp", type="string",
                  help="Set the cutoff distance for the displacements. Data above the cutoff is ignored in predicting new equilibrium positions")
parser.add_option("--dim", dest="supercell_dimension",
                  action="store", type="string",
                  help="Same behavior as DIM tag")
parser.add_option("--factor", dest="factor", type="float",
                  help="Conversion factor to the default force unit (eV/A)")
parser.add_option("--fc2", dest="is_fc2",
                  action="store_true",
                  help="Calculate harmonic force constants")
parser.add_option("--hdf5", dest="is_hdf5", action="store_true",
                  help="Use hdf5 for force constants")
parser.add_option("--fc3", dest="is_fc3", action="store_true",
                  help="Calculate the 3rd order interatomic force constants")
parser.add_option("--f2h","--convert_input", dest="is_convert_input",
                  action="store_true",
                  help="convert original input fles including coordinate, velocity, force and energy to hdf5 file and save it on the disk")
parser.add_option("--legend", dest="is_legend",
                  action="store_true",
                  help="Legend of plots is shown in thermal displacements")
parser.add_option("--loglevel", dest="loglevel", type="int",
                  help="Log level")
parser.add_option("--cutrf", "--cutoff_residual_force", dest="cutrf", type="float",
                  help="The cutoff residual force in predicting the equilibrium position")
parser.add_option("--nosym", dest="is_nosym",
                  action="store_true",
                  help="Symmetry is not imposed.")
parser.add_option("-p", "--plot", dest="is_graph_plot",
                  action="store_true",
                  help="Plot data")
parser.add_option("--fcheck",'--fold_check', dest="is_fold_check",
                  action="store_true",
                  help="Check if coordinates are folded")
parser.add_option("--pa", "--primitive_axis", dest="primitive_axis",
                  action="store", type="string",
                  help="Same as PRIMITIVE_AXIS tag")
parser.add_option("-q", "--quiet", dest="quiet",
                  action="store_true",
                  help="Print out smallest information")
parser.add_option("-s", "--save", dest="is_graph_save",
                  action="store_true",
                  help="Save plot data in pdf")
parser.add_option("-t","--temperature", dest="temperature", type="string",
                  help="The temperature for MD run")
parser.add_option("--qpoints", dest="qpoints", type="string",
                  help="Calculate at specified q-points")
parser.add_option("--tolerance", dest="symprec", type="float",
                  help="Symmetry tolerance to search")
parser.add_option("-v", "--verbose", dest="verbose",
                  action="store_true",
                  help="Detailed information is shown.")
parser.add_option("--ri", dest="is_rotational",
                  action="store_true",
                  help="Enforce rotational invariance")
parser.add_option("--ti", dest="is_translational",
                  action="store_true",
                  help="Enforce translational invariance")
parser.add_option("-f", "--ff", "--force_file", dest='force_filename', type="string",
                  help="The force file which contain the information of atomic forces")
parser.add_option("-i", "--cf", "--coordinate_filename", dest='coord_filename', type="string",
                  help="The coordinate file which contain the information of positions of atoms")
parser.add_option("--format","--file_format", dest="file_format",type="string",
                  help='set input file mode from "lammps"(default),"xyz" and "vasp"')
parser.add_option("--range", "--step_range", dest="step_range", type="string",
                  help="extract only a range of time steps from the original data, e.g. 1000:2000")
parser.add_option("-d","--divide",dest="divide", type="int",
                  help="The number of segments after dividing the total chunk of data")
(options, args) = parser.parse_args()
option_list = parser.option_list

# Error
no_error = True

# Set log level
log_level = 1
if options.verbose:
    log_level = 2
if options.quiet:
    log_level = 0

if not options.loglevel==None:
    log_level=options.loglevel

# Show title
if log_level > 0:
    print_mdfc()
    print_version(mdfc_version)

if len(args) > 0:
    file_exists(args[0])
    mdfc_conf = ConfParser(filename=args[0],
                              options=options,
                              option_list=option_list)
    settings = mdfc_conf.get_settings()
else:
    mdfc_conf = ConfParser(options=options,
                           option_list=option_list)
    settings = mdfc_conf.get_settings()


###########################
# Parse crystal structure #
###########################

# POSCAR
#The Relaxed structure at 0K should be given in the format of vasp (i.e. POSCAR)

if options.cell_poscar == None:
    file_exists("POSCAR", log_level)
    unitcell_filename = 'POSCAR'
else:
    file_exists(options.cell_poscar, log_level)
    unitcell_filename = options.cell_poscar
unitcell = vasp.read_vasp(unitcell_filename)


# Quick check of the structure
if np.linalg.det(unitcell.get_cell()) < 0.0:
    print_error_message('Determinant of the lattice vector matrix has to be positive.')
    if log_level > 0:
        print_end()
    sys.exit(0)


# --factor: force unit factor
if options.factor is not None:
    factor = options.factor
else:
    factor = 1

symprec = options.symprec
supercell = get_supercell(unitcell, settings.get_supercell_matrix(), symprec)
symmetry = Symmetry(supercell, symprec)
fc = ForceConstants(supercell, symprec)

if options.sym_fc2:
    fc.set_first_independents()
    print "Under the system symmetry"
    print "Number of first independent atoms: %4d" % fc._ind1['natoms']
    fc.set_second_independents(pair_included=cutoff.get_pair_inclusion())
    print "Number of second independent atoms %4d" %np.sum(fc._ind2['natoms'])
    if not self._cutoff.get_pair_inclusion().all():
        print "Number of second independent atoms reduces to %d after cutoff" %fc._ind2['included'].sum()
    fc.get_irreducible_fc2s_with_permute()


    fc.get_fc2_coefficients()
    if self._cutoff.get_cutoff_pair() is not None:
        pair_inclusion = self._cutoff.get_pair_inclusion()
        fc.set_pair_reduced_included(pair_inclusion)
    else:
        fc.set_pair_reduced_included()
    print "Permutation symmetry reduces number of irreducible pairs from %4d to %4d"\
          %(np.sum(fc._ind2['natoms']), len(fc._pairs_reduced))
    if self._cutoff.get_cutoff_pair() is not None:
        print "The artificial cutoff reduces number of irreducible pairs from %4d to %4d"\
              %(len(fc._pairs_reduced), np.sum(fc._is_pairs_included))
    print "Calculating transformation coefficients..."
    print "Number of independent fc2 components: %d" %(np.sum(fc._is_pairs_included)*9)
    fc.get_irreducible_fc2_components_with_spg()
    print "Point group invariance reduces independent fc2 components to %d" %(len(fc._ifc2_ele))
    sys.stdout.flush()
    if self._is_trans_inv:
        fc.get_fc2_translational_invariance()
        print "Translational invariance further reduces independent fc2 components to %d" %len(fc._ifc2_ele)
    if self._is_rot_inv:
        fc.get_fc2_rotational_invariance(self.unitcell)
        print "Rotational invariance further reduces independent fc2 components to %d" %len(fc._ifc2_ele)
    print "Independent fc2 components calculation completed"
    sys.stdout.flush()
if options.sym_fc3:
    pass
