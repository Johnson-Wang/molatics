In file included from /usr/lib/python2.7/dist-packages/numpy/core/include/numpy/ndarraytypes.h:1761:0,
                 from /usr/lib/python2.7/dist-packages/numpy/core/include/numpy/ndarrayobject.h:17,
                 from /usr/lib/python2.7/dist-packages/numpy/core/include/numpy/arrayobject.h:4,
                 from c/_mdfc.c:2:
/usr/lib/python2.7/dist-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:15:2: warning: #warning "Using deprecated NumPy API, disable it by " "#defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION" [-Wcpp]
 #warning "Using deprecated NumPy API, disable it by " \
  ^
In file included from /usr/lib/python2.7/dist-packages/numpy/core/include/numpy/ndarrayobject.h:26:0,
                 from /usr/lib/python2.7/dist-packages/numpy/core/include/numpy/arrayobject.h:4,
                 from c/_mdfc.c:2:
c/_mdfc.c: In function ‘py_get_fc3_spg_invariance’:
/usr/lib/python2.7/dist-packages/numpy/core/include/numpy/__multiarray_api.h:1713:144: warning: ‘return’ with no value, in function returning non-void [-Wreturn-type]
 #define import_array() {if (_import_array() < 0) {PyErr_Print(); PyErr_SetString(PyExc_ImportError, "numpy.core.multiarray failed to import"); return NUMPY_IMPORT_ARRAY_RETVAL; } }
                                                                                                                                                ^
c/_mdfc.c:93:3: note: in expansion of macro ‘import_array’
   import_array();
   ^
c/_mdfc.c:211:23: warning: passing argument 10 of ‘get_fc3_spg_invariance’ from incompatible pointer type [enabled by default]
                       precesion);
                       ^
In file included from c/_mdfc.c:4:0:
c/mdfc_h/fc3.h:2:15: note: expected ‘const double (*)[3]’ but argument is of type ‘double (*)[3]’
 F3ArbiLenDBL* get_fc3_spg_invariance(int *Independents,
               ^
In file included from /usr/lib/python2.7/dist-packages/numpy/core/include/numpy/ndarrayobject.h:26:0,
                 from /usr/lib/python2.7/dist-packages/numpy/core/include/numpy/arrayobject.h:4,
                 from c/_mdfc.c:2:
c/_mdfc.c: In function ‘py_test’:
/usr/lib/python2.7/dist-packages/numpy/core/include/numpy/__multiarray_api.h:1713:144: warning: ‘return’ with no value, in function returning non-void [-Wreturn-type]
 #define import_array() {if (_import_array() < 0) {PyErr_Print(); PyErr_SetString(PyExc_ImportError, "numpy.core.multiarray failed to import"); return NUMPY_IMPORT_ARRAY_RETVAL; } }
                                                                                                                                                ^
c/_mdfc.c:253:3: note: in expansion of macro ‘import_array’
   import_array();
   ^
c/_mdfc.c: In function ‘py_get_fc3_coefficients’:
/usr/lib/python2.7/dist-packages/numpy/core/include/numpy/__multiarray_api.h:1713:144: warning: ‘return’ with no value, in function returning non-void [-Wreturn-type]
 #define import_array() {if (_import_array() < 0) {PyErr_Print(); PyErr_SetString(PyExc_ImportError, "numpy.core.multiarray failed to import"); return NUMPY_IMPORT_ARRAY_RETVAL; } }
                                                                                                                                                ^
c/_mdfc.c:298:3: note: in expansion of macro ‘import_array’
   import_array();
   ^
c/_mdfc.c:443:24: warning: passing argument 5 of ‘get_fc3_coefficients’ from incompatible pointer type [enabled by default]
                        precesion);
                        ^
In file included from c/_mdfc.c:4:0:
c/mdfc_h/fc3.h:13:6: note: expected ‘const double (*)[27][27]’ but argument is of type ‘double (*)[27][27]’
 void get_fc3_coefficients(double (*coefficients)[27][27], 
      ^
c/_mdfc.c:443:24: warning: passing argument 6 of ‘get_fc3_coefficients’ from incompatible pointer type [enabled by default]
                        precesion);
                        ^
In file included from c/_mdfc.c:4:0:
c/mdfc_h/fc3.h:13:6: note: expected ‘const double (*)[3]’ but argument is of type ‘double (*)[3]’
 void get_fc3_coefficients(double (*coefficients)[27][27], 
      ^
c/_mdfc.c:319:7: warning: variable ‘ntriplets’ set but not used [-Wunused-but-set-variable]
   int ntriplets, natoms, nind1, nind2, maxrot2, maxrot3;
       ^
c/mdfc/fc3.c: In function ‘get_fc3_spg_invariance’:
c/mdfc/fc3.c:66:9: warning: passing argument 2 of ‘mat_copy_matrix_i3’ from incompatible pointer type [enabled by default]
         mat_copy_matrix_i3(rot1, symmetry1->rot[operations->vec[i]]);
         ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:152:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_copy_matrix_i3(int a[3][3], const int b[3][3]);
      ^
c/mdfc/fc3.c:68:9: warning: passing argument 2 of ‘get_atom_sent_by_operation’ from incompatible pointer type [enabled by default]
         atom2_1 = get_atom_sent_by_operation(atom2_0, positions->vec, rot1, trans1, num_atoms, symprec);
         ^
In file included from c/mdfc/fc3.c:4:0:
c/mdfc_h/force_constants.h:7:5: note: expected ‘const double (*)[3]’ but argument is of type ‘double (* const)[3]’
 int get_atom_sent_by_operation(const int orig_atom, const double (*positions)[3], const int rot[3][3], const double tran[3], const int num_atoms, const double precesion);
     ^
c/mdfc/fc3.c:68:9: warning: passing argument 3 of ‘get_atom_sent_by_operation’ from incompatible pointer type [enabled by default]
         atom2_1 = get_atom_sent_by_operation(atom2_0, positions->vec, rot1, trans1, num_atoms, symprec);
         ^
In file included from c/mdfc/fc3.c:4:0:
c/mdfc_h/force_constants.h:7:5: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 int get_atom_sent_by_operation(const int orig_atom, const double (*positions)[3], const int rot[3][3], const double tran[3], const int num_atoms, const double precesion);
     ^
c/mdfc/fc3.c:69:9: warning: passing argument 2 of ‘get_atom_sent_by_operation’ from incompatible pointer type [enabled by default]
         atom3_1 = get_atom_sent_by_operation(atom3_0, positions->vec, rot1, trans1, num_atoms, symprec);
         ^
In file included from c/mdfc/fc3.c:4:0:
c/mdfc_h/force_constants.h:7:5: note: expected ‘const double (*)[3]’ but argument is of type ‘double (* const)[3]’
 int get_atom_sent_by_operation(const int orig_atom, const double (*positions)[3], const int rot[3][3], const double tran[3], const int num_atoms, const double precesion);
     ^
c/mdfc/fc3.c:69:9: warning: passing argument 3 of ‘get_atom_sent_by_operation’ from incompatible pointer type [enabled by default]
         atom3_1 = get_atom_sent_by_operation(atom3_0, positions->vec, rot1, trans1, num_atoms, symprec);
         ^
In file included from c/mdfc/fc3.c:4:0:
c/mdfc_h/force_constants.h:7:5: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 int get_atom_sent_by_operation(const int orig_atom, const double (*positions)[3], const int rot[3][3], const double tran[3], const int num_atoms, const double precesion);
     ^
c/mdfc/fc3.c:80:11: warning: passing argument 2 of ‘mat_copy_matrix_i3’ from incompatible pointer type [enabled by default]
           mat_copy_matrix_i3(rot2, ps2->rot[rotations2->vec[j]]);
           ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:152:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_copy_matrix_i3(int a[3][3], const int b[3][3]);
      ^
c/mdfc/fc3.c:81:11: warning: passing argument 3 of ‘get_atom_sent_by_rotation’ from incompatible pointer type [enabled by default]
           atom3_2 = get_atom_sent_by_rotation(atom3_1, atom1_1, positions->vec, rot2, num_atoms, symprec);
           ^
In file included from c/mdfc/fc3.c:4:0:
c/mdfc_h/force_constants.h:9:5: note: expected ‘const double (*)[3]’ but argument is of type ‘double (* const)[3]’
 int get_atom_sent_by_rotation(const int orig_atom,const int center_atom,const double (*positions)[3], const int rot[3][3], const int num_atoms, const double precesion);
     ^
c/mdfc/fc3.c:81:11: warning: passing argument 4 of ‘get_atom_sent_by_rotation’ from incompatible pointer type [enabled by default]
           atom3_2 = get_atom_sent_by_rotation(atom3_1, atom1_1, positions->vec, rot2, num_atoms, symprec);
           ^
In file included from c/mdfc/fc3.c:4:0:
c/mdfc_h/force_constants.h:9:5: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 int get_atom_sent_by_rotation(const int orig_atom,const int center_atom,const double (*positions)[3], const int rot[3][3], const int num_atoms, const double precesion);
     ^
c/mdfc/fc3.c:90:13: warning: passing argument 2 of ‘mat_copy_matrix_i3’ from incompatible pointer type [enabled by default]
             mat_copy_matrix_i3(rot3, ps3->rot[rotations3->vec[k]]);
             ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:152:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_copy_matrix_i3(int a[3][3], const int b[3][3]);
      ^
c/mdfc/fc3.c:91:13: warning: passing argument 2 of ‘mat_multiply_matrix_i3’ from incompatible pointer type [enabled by default]
             mat_multiply_matrix_i3(rot_temp, rot2, rot1);
             ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:169:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_multiply_matrix_i3(int m[3][3],
      ^
c/mdfc/fc3.c:91:13: warning: passing argument 3 of ‘mat_multiply_matrix_i3’ from incompatible pointer type [enabled by default]
             mat_multiply_matrix_i3(rot_temp, rot2, rot1);
             ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:169:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_multiply_matrix_i3(int m[3][3],
      ^
c/mdfc/fc3.c:92:13: warning: passing argument 2 of ‘mat_multiply_matrix_i3’ from incompatible pointer type [enabled by default]
             mat_multiply_matrix_i3(rot, rot3, rot_temp);
             ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:169:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_multiply_matrix_i3(int m[3][3],
      ^
c/mdfc/fc3.c:92:13: warning: passing argument 3 of ‘mat_multiply_matrix_i3’ from incompatible pointer type [enabled by default]
             mat_multiply_matrix_i3(rot, rot3, rot_temp);
             ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:169:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_multiply_matrix_i3(int m[3][3],
      ^
c/mdfc/fc3.c:93:13: warning: passing argument 1 of ‘get_index_from_rots’ from incompatible pointer type [enabled by default]
             if(get_index_from_rots(ps_triplets->rot, ps_triplets->size, rot) != -1) continue; // skip repeated rotational components to improve the speed
             ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:244:5: note: expected ‘const int (*)[3][3]’ but argument is of type ‘int (*)[3][3]’
 int get_index_from_rots(const int (*a)[3][3], const int length, const int value[3][3]);
     ^
c/mdfc/fc3.c:93:13: warning: passing argument 3 of ‘get_index_from_rots’ from incompatible pointer type [enabled by default]
             if(get_index_from_rots(ps_triplets->rot, ps_triplets->size, rot) != -1) continue; // skip repeated rotational components to improve the speed
             ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:244:5: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 int get_index_from_rots(const int (*a)[3][3], const int length, const int value[3][3]);
     ^
c/mdfc/fc3.c:94:13: warning: passing argument 2 of ‘mat_copy_matrix_i3’ from incompatible pointer type [enabled by default]
             mat_copy_matrix_i3(ps_triplets->rot[ps_triplets->size++], rot); 
             ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:152:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_copy_matrix_i3(int a[3][3], const int b[3][3]);
      ^
c/mdfc/fc3.c:95:13: warning: passing argument 2 of ‘mat_cast_matrix_3i_to_3d’ from incompatible pointer type [enabled by default]
             mat_cast_matrix_3i_to_3d(rot_db, rot);
             ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:193:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_cast_matrix_3i_to_3d(double m[3][3],
      ^
c/mdfc/fc3.c:96:13: warning: passing argument 2 of ‘mat_get_similar_matrix_d3’ from incompatible pointer type [enabled by default]
             mat_get_similar_matrix_d3(rot_cart, rot_db, lattice, 0);
             ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:200:5: note: expected ‘const double (*)[3]’ but argument is of type ‘double (*)[3]’
 int mat_get_similar_matrix_d3(double m[3][3],
     ^
c/mdfc/fc3.c:97:13: warning: passing argument 2 of ‘mat_out_product_matrix3_permute_d3’ from incompatible pointer type [enabled by default]
             mat_out_product_matrix3_permute_d3(PP, rot_cart, rot_cart, rot_cart, permute3[ipermute]);
             ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:130:6: note: expected ‘const double (*)[3]’ but argument is of type ‘double (*)[3]’
 void mat_out_product_matrix3_permute_d3(double Q[27][27],
      ^
c/mdfc/fc3.c:97:13: warning: passing argument 3 of ‘mat_out_product_matrix3_permute_d3’ from incompatible pointer type [enabled by default]
             mat_out_product_matrix3_permute_d3(PP, rot_cart, rot_cart, rot_cart, permute3[ipermute]);
             ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:130:6: note: expected ‘const double (*)[3]’ but argument is of type ‘double (*)[3]’
 void mat_out_product_matrix3_permute_d3(double Q[27][27],
      ^
c/mdfc/fc3.c:97:13: warning: passing argument 4 of ‘mat_out_product_matrix3_permute_d3’ from incompatible pointer type [enabled by default]
             mat_out_product_matrix3_permute_d3(PP, rot_cart, rot_cart, rot_cart, permute3[ipermute]);
             ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:130:6: note: expected ‘const double (*)[3]’ but argument is of type ‘double (*)[3]’
 void mat_out_product_matrix3_permute_d3(double Q[27][27],
      ^
c/mdfc/fc3.c:38:100: warning: variable ‘atom3_3’ set but not used [-Wunused-but-set-variable]
   int atom1, atom2, atom3, atom1_0, atom2_0, atom3_0, atom1_1, atom2_1, atom3_1, atom2_2, atom3_2, atom3_3;
                                                                                                    ^
c/mdfc/fc3.c: In function ‘get_fc3_coefficients’:
c/mdfc/fc3.c:201:5: warning: passing argument 2 of ‘mat_copy_matrix_i3’ from incompatible pointer type [enabled by default]
     mat_copy_matrix_i3(rot1, symmetry1->rot[mapope1->vec[a1]]);
     ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:152:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_copy_matrix_i3(int a[3][3], const int b[3][3]);
      ^
c/mdfc/fc3.c:209:7: warning: passing argument 2 of ‘get_atom_sent_by_operation’ from incompatible pointer type [enabled by default]
       atom2_1 = get_atom_sent_by_operation(a2, positions->vec, rot1, trans1, natoms, symprec);
       ^
In file included from c/mdfc/fc3.c:4:0:
c/mdfc_h/force_constants.h:7:5: note: expected ‘const double (*)[3]’ but argument is of type ‘double (* const)[3]’
 int get_atom_sent_by_operation(const int orig_atom, const double (*positions)[3], const int rot[3][3], const double tran[3], const int num_atoms, const double precesion);
     ^
c/mdfc/fc3.c:209:7: warning: passing argument 3 of ‘get_atom_sent_by_operation’ from incompatible pointer type [enabled by default]
       atom2_1 = get_atom_sent_by_operation(a2, positions->vec, rot1, trans1, natoms, symprec);
       ^
In file included from c/mdfc/fc3.c:4:0:
c/mdfc_h/force_constants.h:7:5: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 int get_atom_sent_by_operation(const int orig_atom, const double (*positions)[3], const int rot[3][3], const double tran[3], const int num_atoms, const double precesion);
     ^
c/mdfc/fc3.c:212:7: warning: passing argument 2 of ‘mat_copy_matrix_i3’ from incompatible pointer type [enabled by default]
       mat_copy_matrix_i3(rot2, ps2->rot[mapope2->mat[index1][atom2_1]]);
       ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:152:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_copy_matrix_i3(int a[3][3], const int b[3][3]);
      ^
c/mdfc/fc3.c:217:9: warning: passing argument 2 of ‘get_atom_sent_by_operation’ from incompatible pointer type [enabled by default]
         atom3_1 = get_atom_sent_by_operation(a3, positions->vec, rot1, trans1, natoms, symprec);
         ^
In file included from c/mdfc/fc3.c:4:0:
c/mdfc_h/force_constants.h:7:5: note: expected ‘const double (*)[3]’ but argument is of type ‘double (* const)[3]’
 int get_atom_sent_by_operation(const int orig_atom, const double (*positions)[3], const int rot[3][3], const double tran[3], const int num_atoms, const double precesion);
     ^
c/mdfc/fc3.c:217:9: warning: passing argument 3 of ‘get_atom_sent_by_operation’ from incompatible pointer type [enabled by default]
         atom3_1 = get_atom_sent_by_operation(a3, positions->vec, rot1, trans1, natoms, symprec);
         ^
In file included from c/mdfc/fc3.c:4:0:
c/mdfc_h/force_constants.h:7:5: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 int get_atom_sent_by_operation(const int orig_atom, const double (*positions)[3], const int rot[3][3], const double tran[3], const int num_atoms, const double precesion);
     ^
c/mdfc/fc3.c:218:9: warning: passing argument 3 of ‘get_atom_sent_by_rotation’ from incompatible pointer type [enabled by default]
         atom3_2 = get_atom_sent_by_rotation(atom3_1, atom1_1, positions->vec, rot2, natoms, symprec);
         ^
In file included from c/mdfc/fc3.c:4:0:
c/mdfc_h/force_constants.h:9:5: note: expected ‘const double (*)[3]’ but argument is of type ‘double (* const)[3]’
 int get_atom_sent_by_rotation(const int orig_atom,const int center_atom,const double (*positions)[3], const int rot[3][3], const int num_atoms, const double precesion);
     ^
c/mdfc/fc3.c:218:9: warning: passing argument 4 of ‘get_atom_sent_by_rotation’ from incompatible pointer type [enabled by default]
         atom3_2 = get_atom_sent_by_rotation(atom3_1, atom1_1, positions->vec, rot2, natoms, symprec);
         ^
In file included from c/mdfc/fc3.c:4:0:
c/mdfc_h/force_constants.h:9:5: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 int get_atom_sent_by_rotation(const int orig_atom,const int center_atom,const double (*positions)[3], const int rot[3][3], const int num_atoms, const double precesion);
     ^
c/mdfc/fc3.c:221:9: warning: passing argument 2 of ‘mat_copy_matrix_i3’ from incompatible pointer type [enabled by default]
         mat_copy_matrix_i3(rot3, ps3->rot[mapope3->f3[index1][index2][atom3_2]]);
         ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:152:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_copy_matrix_i3(int a[3][3], const int b[3][3]);
      ^
c/mdfc/fc3.c:222:9: warning: passing argument 2 of ‘mat_multiply_matrix_i3’ from incompatible pointer type [enabled by default]
         mat_multiply_matrix_i3(rot_temp, rot2, rot1);
         ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:169:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_multiply_matrix_i3(int m[3][3],
      ^
c/mdfc/fc3.c:222:9: warning: passing argument 3 of ‘mat_multiply_matrix_i3’ from incompatible pointer type [enabled by default]
         mat_multiply_matrix_i3(rot_temp, rot2, rot1);
         ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:169:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_multiply_matrix_i3(int m[3][3],
      ^
c/mdfc/fc3.c:223:9: warning: passing argument 2 of ‘mat_multiply_matrix_i3’ from incompatible pointer type [enabled by default]
         mat_multiply_matrix_i3(rot, rot3, rot_temp);
         ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:169:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_multiply_matrix_i3(int m[3][3],
      ^
c/mdfc/fc3.c:223:9: warning: passing argument 3 of ‘mat_multiply_matrix_i3’ from incompatible pointer type [enabled by default]
         mat_multiply_matrix_i3(rot, rot3, rot_temp);
         ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:169:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_multiply_matrix_i3(int m[3][3],
      ^
c/mdfc/fc3.c:224:9: warning: passing argument 2 of ‘mat_cast_matrix_3i_to_3d’ from incompatible pointer type [enabled by default]
         mat_cast_matrix_3i_to_3d(rot_db, rot);
         ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:193:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_cast_matrix_3i_to_3d(double m[3][3],
      ^
c/mdfc/fc3.c:225:9: warning: passing argument 2 of ‘mat_get_similar_matrix_d3’ from incompatible pointer type [enabled by default]
         mat_get_similar_matrix_d3(rot_cart, rot_db, lattice, 0);
         ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:200:5: note: expected ‘const double (*)[3]’ but argument is of type ‘double (*)[3]’
 int mat_get_similar_matrix_d3(double m[3][3],
     ^
c/mdfc/fc3.c:226:9: warning: passing argument 2 of ‘mat_out_product_matrix3_d3’ from incompatible pointer type [enabled by default]
         mat_out_product_matrix3_d3(PP, rot_cart, rot_cart, rot_cart);
         ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:135:6: note: expected ‘const double (*)[3]’ but argument is of type ‘double (*)[3]’
 void mat_out_product_matrix3_d3(double Q[27][27],
      ^
c/mdfc/fc3.c:226:9: warning: passing argument 3 of ‘mat_out_product_matrix3_d3’ from incompatible pointer type [enabled by default]
         mat_out_product_matrix3_d3(PP, rot_cart, rot_cart, rot_cart);
         ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:135:6: note: expected ‘const double (*)[3]’ but argument is of type ‘double (*)[3]’
 void mat_out_product_matrix3_d3(double Q[27][27],
      ^
c/mdfc/fc3.c:226:9: warning: passing argument 4 of ‘mat_out_product_matrix3_d3’ from incompatible pointer type [enabled by default]
         mat_out_product_matrix3_d3(PP, rot_cart, rot_cart, rot_cart);
         ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:135:6: note: expected ‘const double (*)[3]’ but argument is of type ‘double (*)[3]’
 void mat_out_product_matrix3_d3(double Q[27][27],
      ^
c/mdfc/fc3.c:229:9: warning: passing argument 1 of ‘get_index_from_vectors_i3’ from incompatible pointer type [enabled by default]
         indext = get_index_from_vectors_i3(triplets->tri, triplets->size, triplet_rot); // index of triplet
         ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:242:5: note: expected ‘const int (*)[3]’ but argument is of type ‘int (* const)[3]’
 int get_index_from_vectors_i3(const int (*a)[3], const int length, const int value[3]);
     ^
c/mdfc/fc3.c:231:9: warning: passing argument 3 of ‘mat_multiply_matrix_d27’ from incompatible pointer type [enabled by default]
         mat_multiply_matrix_d27(PP, triplet_transform[indext], PP);
         ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:146:6: note: expected ‘const double (*)[27]’ but argument is of type ‘double (*)[27]’
 void mat_multiply_matrix_d27(double m[27][27],const double a[27][27],const double b[27][27]);
      ^
c/mdfc/fc3.c:234:9: warning: passing argument 2 of ‘mat_copy_mat_d27’ from incompatible pointer type [enabled by default]
         mat_copy_mat_d27(coefficients[a1 * natoms * natoms + a2 * natoms + a3], PP);
         ^
In file included from c/mdfc/fc3.c:3:0:
c/mdfc_h/mathfunc.h:145:6: note: expected ‘const double (*)[27]’ but argument is of type ‘double (*)[27]’
 void mat_copy_mat_d27(double a[27][27], const double b[27][27]);
      ^
c/mdfc/fc3.c: In function ‘get_fc3_spg_invariance’:
c/mdfc/fc3.c:150:21: warning: ‘operations’ may be used uninitialized in this function [-Wmaybe-uninitialized]
   free_VecArbiLenINT(operations);
                     ^
c/mdfc/force_constants.c: In function ‘get_all_symmetry_routes_to_star’:
c/mdfc/force_constants.c:13:5: warning: passing argument 2 of ‘mat_multiply_matrix_vector_id3’ from incompatible pointer type [enabled by default]
     mat_multiply_matrix_vector_id3(pos, symmetry->rot[i], positions->vec[atom]);
     ^
In file included from c/mdfc/force_constants.c:2:0:
c/mdfc_h/mathfunc.h:184:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_multiply_matrix_vector_id3(double v[3],
      ^
c/mdfc/force_constants.c: In function ‘get_all_point_symmetry_routes_to_star’:
c/mdfc/force_constants.c:36:5: warning: passing argument 2 of ‘mat_multiply_matrix_vector_id3’ from incompatible pointer type [enabled by default]
     mat_multiply_matrix_vector_id3(pos, ps->rot[i], rel);
     ^
In file included from c/mdfc/force_constants.c:2:0:
c/mdfc_h/mathfunc.h:184:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_multiply_matrix_vector_id3(double v[3],
      ^
c/mdfc/mathfunc.c: In function ‘mat_multiply_matrix_i27’:
c/mdfc/mathfunc.c:785:3: warning: passing argument 2 of ‘mat_copy_mat_i27’ from incompatible pointer type [enabled by default]
     {
   ^
c/mdfc/mathfunc.c:745:6: note: expected ‘const int (*)[27]’ but argument is of type ‘int (*)[27]’
 void mat_copy_mat_i27(int a[27][27], const int b[27][27])
      ^
c/mdfc/mathfunc.c: In function ‘mat_multiply_matrix_d27’:
c/mdfc/mathfunc.c:828:3: warning: passing argument 2 of ‘mat_copy_mat_d27’ from incompatible pointer type [enabled by default]
   }
   ^
c/mdfc/mathfunc.c:788:6: note: expected ‘const double (*)[27]’ but argument is of type ‘double (*)[27]’
     }
      ^
c/mdfc/mathfunc.c: In function ‘mat_multiply_matrix_d3’:
c/mdfc/mathfunc.c:881:3: warning: passing argument 2 of ‘mat_copy_matrix_d3’ from incompatible pointer type [enabled by default]
   int i;
   ^
c/mdfc/mathfunc.c:571:6: note: expected ‘const double (*)[3]’ but argument is of type ‘double (*)[3]’
 void mat_copy_matrix_d3(double a[3][3], const double b[3][3])
      ^
c/mdfc/mathfunc.c: In function ‘mat_multiply_matrix_i3’:
c/mdfc/mathfunc.c:896:3: warning: passing argument 2 of ‘mat_copy_matrix_i3’ from incompatible pointer type [enabled by default]
     c[i] = a[i][0] * b[0] + a[i][1] * b[1] + a[i][2] * b[2];
   ^
c/mdfc/mathfunc.c:584:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_copy_matrix_i3(int a[3][3], const int b[3][3])
      ^
c/mdfc/mathfunc.c: In function ‘mat_multiply_matrix_di3’:
c/mdfc/mathfunc.c:911:3: warning: passing argument 2 of ‘mat_copy_matrix_d3’ from incompatible pointer type [enabled by default]
 }
   ^
c/mdfc/mathfunc.c:571:6: note: expected ‘const double (*)[3]’ but argument is of type ‘double (*)[3]’
 void mat_copy_matrix_d3(double a[3][3], const double b[3][3])
      ^
c/mdfc/mathfunc.c: In function ‘mat_multiply_matrix_id3’:
c/mdfc/mathfunc.c:926:3: warning: passing argument 2 of ‘mat_copy_matrix_d3’ from incompatible pointer type [enabled by default]
       const int a[3][3],
   ^
c/mdfc/mathfunc.c:571:6: note: expected ‘const double (*)[3]’ but argument is of type ‘double (*)[3]’
 void mat_copy_matrix_d3(double a[3][3], const double b[3][3])
      ^
c/mdfc/mathfunc.c: In function ‘mat_inverse_matrix_d3’:
c/mdfc/mathfunc.c:1044:3: warning: passing argument 2 of ‘mat_copy_matrix_d3’ from incompatible pointer type [enabled by default]
          const double lattice[3][3])
   ^
c/mdfc/mathfunc.c:571:6: note: expected ‘const double (*)[3]’ but argument is of type ‘double (*)[3]’
 void mat_copy_matrix_d3(double a[3][3], const double b[3][3])
      ^
c/mdfc/mathfunc.c: In function ‘mat_get_similar_matrix_d3’:
c/mdfc/mathfunc.c:1060:3: warning: passing argument 3 of ‘mat_multiply_matrix_d3’ from incompatible pointer type [enabled by default]
 
   ^
c/mdfc/mathfunc.c:869:6: note: expected ‘const double (*)[3]’ but argument is of type ‘double (*)[3]’
     for (j = 0; j < 3; j++) {
      ^
c/mdfc/mathfunc.c:1061:3: warning: passing argument 3 of ‘mat_multiply_matrix_d3’ from incompatible pointer type [enabled by default]
 double mat_Dabs(const double a)
   ^
c/mdfc/mathfunc.c:869:6: note: expected ‘const double (*)[3]’ but argument is of type ‘double (*)[3]’
     for (j = 0; j < 3; j++) {
      ^
c/mdfc/mathfunc.c: In function ‘mat_transpose_matrix_d3’:
c/mdfc/mathfunc.c:1077:3: warning: passing argument 2 of ‘mat_copy_matrix_d3’ from incompatible pointer type [enabled by default]
 double mat_Dmod1(const double a)
   ^
c/mdfc/mathfunc.c:571:6: note: expected ‘const double (*)[3]’ but argument is of type ‘double (*)[3]’
 void mat_copy_matrix_d3(double a[3][3], const double b[3][3])
      ^
c/mdfc/mathfunc.c: In function ‘mat_transpose_matrix_i3’:
c/mdfc/mathfunc.c:1092:3: warning: passing argument 2 of ‘mat_copy_matrix_i3’ from incompatible pointer type [enabled by default]
       }
   ^
c/mdfc/mathfunc.c:584:6: note: expected ‘const int (*)[3]’ but argument is of type ‘int (*)[3]’
 void mat_copy_matrix_i3(int a[3][3], const int b[3][3])
      ^
c/mdfc/mathfunc.c: In function ‘mat_get_metric’:
c/mdfc/mathfunc.c:1100:3: warning: passing argument 2 of ‘mat_multiply_matrix_d3’ from incompatible pointer type [enabled by default]
   int i, index=-1;
   ^
c/mdfc/mathfunc.c:869:6: note: expected ‘const double (*)[3]’ but argument is of type ‘double (*)[3]’
     for (j = 0; j < 3; j++) {
      ^
